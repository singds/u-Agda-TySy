@book{crafa,
    author = {Silvia Crafa},
    title = {Notes on Advanced topics in programming languages},
    year = {2021},
}

@book{pierce,
    author = {Pierce, Benjamin C.},
    title = {Types and Programming Languages},
    year = {2002},
    isbn = {0262162091},
    publisher = {The MIT Press},
    edition = {1st},
    abstract = {A type system is a syntactic method for automatically checking the absence of certain erroneous behaviors by classifying program phrases according to the kinds of values they compute. The study of type systems -- and of programming languages from a type-theoretic perspective -- has important applications in software engineering, language design, high-performance compilers, and security.This text provides a comprehensive introduction both to type systems in computer science and to the basic theory of programming languages. The approach is pragmatic and operational; each new concept is motivated by programming examples and the more theoretical sections are driven by the needs of implementations. Each chapter is accompanied by numerous exercises and solutions, as well as a running implementation, available via the Web. Dependencies between chapters are explicitly identified, allowing readers to choose a variety of paths through the material.The core topics include the untyped lambda-calculus, simple type systems, type reconstruction, universal and existential polymorphism, subtyping, bounded quantification, recursive types, kinds, and type operators. Extended case studies develop a variety of approaches to modeling the features of object-oriented languages.}
}

@Book{plfa20.07,
    author = {Philip Wadler and Wen Kokke and Jeremy G. Siek},
    title  = {Programming Language Foundations in Agda},
    year   = {2020},
    month  = jul,
    url    = {https://plfa.inf.ed.ac.uk/20.07/},
}

@book{pp-in-agda,
    author = {Jesper Cockx},
    title = {Programming and Proving in Agda},
    year = {2022},
    url  = {https://github.com/jespercockx/agda-lecture-notes/blob/master/agda.pdf},
}

@book{programming-in-mltt,
    title={Programming in Martin-Löf's Type Theory: An Introduction},
    author={Bengt, Nordström},
    publisher={Independently published},
    year={2021},
}

@inbook{dep-types-at-work,
    author = {Bove, Ana and Dybjer, Peter},
    title = {Dependent Types at Work},
    year = {2009},
    isbn = {9783642031526},
    publisher = {Springer-Verlag},
    address = {Berlin, Heidelberg},
    url = {https://doi.org/10.1007/978-3-642-03153-3_2},
    abstract = {In these lecture notes we give an introduction to functional programming with dependent types. We use the dependently typed programming language Agda which is an extension of Martin-L\"{o}f type theory. First we show how to do simply typed functional programming in the style of Haskell and ML. Some differences between Agda's type system and the Hindley-Milner type system of Haskell and ML are also discussed. Then we show how to use dependent types for programming and we explain the basic ideas behind type-checking dependent types. We go on to explain the Curry-Howard identification of propositions and types. This is what makes Agda a programming logic and not only a programming language. According to Curry-Howard, we identify programs and proofs, something which is possible only by requiring that all program terminate. However, at the end of these notes we present a method for encoding partial and general recursive functions as total functions using dependent types.},
    booktitle = {Language Engineering and Rigorous Software Development: International LerNet ALFA Summer School 2008, Piriapolis, Uruguay, February 24 - March 1, 2008, Revised Tutorial Lectures},
    pages = {57–99},
    numpages = {43}
}


